generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  USER
  COLLABORATOR
  ADMIN
  ROOT
}

enum profileProviders {
  GOOGLE
}

model Profiles {
  id            String           @id @default(uuid())
  userId        String
  provider      profileProviders
  providerId    String
  providerEmail String

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model Users {
  id        String   @id
  name      String
  phone     String?
  email     String?  @unique
  password  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())

  role     userRole   @default(USER)
  profiles Profiles[]
  domains  Domains[]
  Campaign Campaign[]
}

model recoverPassword {
  id           String   @id
  userId       String
  createdAt    DateTime @default(now())
  expirationAt DateTime
}

enum domainStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model Domains {
  id     String       @id
  url    String
  status domainStatus @default(INACTIVE)
  userId String

  createdAt DateTime @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CampaignDevices {
  IPHONE
  ANDROID
  WINDOWS
  MACBOOK
  LINUX
}

enum CampaignAntiSpy {
  VPN
  PROXY
  TOR
  RELAY
  BOT
}

model Campaign {
  id     String @id
  userId String

  // basic infos
  origin       String[]
  name         String
  domain       String
  safePage     String?
  offerPage    String?
  languages    String[]
  countries    String[]
  devices      CampaignDevices[]
  domainStatus domainStatus      @default(PENDING)
  manualReview Boolean           @default(false)

  // allow list
  allowIsps           String[]
  allowRefererOrigins String[]
  allowQueries        String[]
  allowIps            String[]

  // deny list
  antiSpy            CampaignAntiSpy[]
  denyLanguages      String[]
  denyCountries      String[]
  denyIps            String[]
  denyIsps           String[]
  denyQueries        String[]
  denyRefererOrigins String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user Users         @relation(fields: [userId], references: [id])
  log  CampaignLog[]

  @@index([userId])
}

model CampaignLog {
  id         String @id @unique @default(uuid())
  campaignId String

  ip          String?
  redirectTo  String?
  page        String?
  referer     String?
  userAgent   String?
  language    String?
  ipInfo      Json?
  deviceInfo  Json?
  apiResponse String?
  createdAt   DateTime @default(now())
  campaign    Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("CampaignLogs")
}
