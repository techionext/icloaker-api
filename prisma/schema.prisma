generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  USER
  COLLABORATOR
  ADMIN
  ROOT
}

enum profileProviders {
  GOOGLE
}

model Profile {
  id            String           @id @default(uuid())
  userId        String
  provider      profileProviders
  providerId    String
  providerEmail String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("Profiles")
}

model User {
  id        String   @id
  avatar    String?
  avatarKey String?
  name      String
  phone     String?
  email     String?  @unique
  password  String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  role      userRole @default(USER)

  recoverPassword RecoverPassword[]
  profiles        Profile[]
  Domain          Domain[]
  Campaign        Campaign[]

  @@map("Users")
}

model RecoverPassword {
  id           String   @id
  userId       String
  createdAt    DateTime @default(now())
  expirationAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum domainStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model Domain {
  id     String       @id
  url    String
  status domainStatus @default(INACTIVE)
  userId String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Domains")
}

enum campaignDevices {
  IPHONE
  ANDROID
  WINDOWS
  MACBOOK
  LINUX
}

enum campaignAntiSpy {
  VPN
  PROXY
  TOR
  RELAY
  BOT
}

enum safePageMethods {
  EXTERNAL
  INTERNAL
}

enum offerPageMethods {
  SINGLE
  AB
}

enum pageTypes {
  PHISIC
  MIDIA
}

enum origins {
  FACEBOOK
  GOOGLE
  TIKTOK
  KWAI
  MGID
  OUTBRAIN
  TABOOLA
}

enum googleTrafficSource {
  YOUTUBE
  SEARCH
  DISPLAY_NETWORK
  P_MAX
  DEMAND
}

model Campaign {
  id     String @id
  slug   String
  userId String

  // basic infos
  origin          origins[]
  googleSources   googleTrafficSource[]
  name            String
  domain          String
  safePage        String?
  safePageMethod  safePageMethods
  offerPage       String[]
  offerPageMethod offerPageMethods
  languages       String[]
  countries       String[]
  devices         campaignDevices[]
  domainStatus    domainStatus          @default(PENDING)
  manualReview    Boolean               @default(false)
  pageType        pageTypes
  disclaimer      String
  companyName     String
  address         String
  vat             String // CNPJ
  supportPhone    String
  supportEmail    String
  logo            String?
  logoKey         String?

  // allow list
  allowIsps           String[]
  allowRefererOrigins String[]
  allowQueries        String[]
  allowIps            String[]

  // deny list
  antiSpy            campaignAntiSpy[]
  denyLanguages      String[]
  denyCountries      String[]
  denyIps            String[]
  denyIsps           String[]
  denyQueries        String[]
  denyRefererOrigins String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User          @relation(fields: [userId], references: [id])
  log  CampaignLog[]

  @@index([userId])
  @@index([slug])
  @@map("Campaigns")
}

model CampaignLog {
  id         String @id @unique @default(uuid())
  campaignId String

  ip          String?
  redirectTo  String?
  page        String?
  referer     String?
  userAgent   String?
  language    String?
  ipInfo      Json?
  deviceInfo  Json?
  apiResponse String?
  createdAt   DateTime @default(now())
  campaign    Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("CampaignLogs")
}
